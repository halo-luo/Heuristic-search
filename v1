#-*- codeing = utf-8 -*-
#@Time : 2021/4/5 21:07
#@Author : 骆龙飞
#@File : v2.py
#@Software : PyCharm

import numpy as np
import operator

A = ['1', '2', '3', '4', '5', '6', '7', '8', '0']
B = ['1', '2', '3', '4', '5', '6', '0', '8', '7']
# A = list(input("请输入初始状态："))
# B = list(input("请输入目标状态："))

M = np.zeros((3, 3))
N = np.zeros((3, 3))

openlist = []
closelist = []

class State:
    def __init__(self, m):
        self.node = m  # 节点代表的状态
        self.f = 0  # f(n)=g(n)+h(n)
        self.g = 0  # g(n)
        self.h = 0  # h(n)
        self.father = None  # 节点的父亲节点

# 求 该情况下，八数码是否有解（选用）
def sigma(A):
    t = 0
    for i in range(len(A)):
        for j in range(i):
            if(A[j] == "0"):
                continue
            if(A[i] > A[j]):
                t += 1
    return t

# 查看当前状态与目标状态不同的个数（启发函数）
def h(s):
    a = 0
    for i in range(len(s.node)):
        for j in range(len(s.node[i])):
            if s.node[i][j] != goal.node[i][j]:
                a = a + 1
    return a

# 对节点列表按照估价函数的值的规则排序
def list_sort(l):
    cmp = operator.attrgetter('f')
    l.sort(key=cmp)

# A*算法
def A_star(initState):
    global openlist  # 全局变量可以让open表进行时时更新
    openlist = [initState]
    while (openlist):  # 当open表不为空
        get = openlist[0]  # 取出open表的首节点
        if (get.node == goal.node).all():  # 判断是否与目标节点一致
            return get
        openlist.remove(get)  # 将get移出open表
        if (len(closelist) != 0) and ((get.node == item.node).all() for item in closelist):
            continue;
        closelist.append(get)  # 将get放入close表中
        # 判断此时状态的空格位置
        for a in range(len(get.node)):
            for b in range(len(get.node[a])):
                if get.node[a][b] == 0:
                    break
            if get.node[a][b] == 0:
                break
        # 开始移动
        for i in range(len(get.node)):
            for j in range(len(get.node[i])):
                c = get.node.copy()
                # if (i + j - a - b) ** 2 == 1:
                if ((i-a)**2 + (j-b)**2 == 1):
                    c[a][b] = c[i][j]
                    c[i][j] = 0
                    new = State(c)
                    new.father = get  # 此时取出的get节点成为新节点的父亲节点
                    new.g = get.g + 1  # 新节点与父亲节点的距离
                    new.h = h(new)  # 新节点的启发函数值
                    new.f = new.g + new.h  # 新节点的估价函数值
                    openlist.append(new)  # 加入open表中
        list_sort(openlist)  # 排序,先向着f值最小的方向前进
        # for i in openlist:
            # print(i.node,i.h,i.g,i.f)

# 递归打印路径
def printpath(f):
    if f is None:
        return
    # 注意print()语句放在递归调用前和递归调用后的区别。放在后实现了倒叙输出
    printpath(f.father)
    print(f.node)


if __name__ == '__main__':

    for i in range(0,3):
        for j in range(0,3):
            M[i,j] = A[i*3 + j]
            N[i,j] = B[i*3 + j]

    init = State(M)  # 初始状态
    goal = State(N)  # 目标状态

    final = A_star(init)
    if final:
        print("有解，解为：")
        printpath(final)
    else:
        print("无解",final)

    # 判断是否有解（通过判断奇偶性来确定是否有解，同奇同偶有解）
    # if((sigma(A) + sigma(B)) % 2 == 0):
    #     init = State(M)  # 初始状态
    #     goal = State(N)  # 目标状态
    #     final = A_star(init)
    #     if final:
    #         print("有解，解为：")
    #         printpath(final)
    # else:
    #         print("无解")
